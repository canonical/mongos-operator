# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
env_list = lint, unit

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
lib_path = {tox_root}/lib/charms/mongos
all_path = {[vars]src_path} {[vars]tests_path} {[vars]lib_path}

[testenv]
set_env =
    PYTHONPATH = {[vars]src_path}:{tox_root}/lib
    PY_COLORS = 1
allowlist_externals =
    poetry
    
[testenv:build-{production,dev,wrapper}]
# Wrap `charmcraft pack`
pass_env =
    CI
    GH_TOKEN
allowlist_externals =
    {[testenv]allowlist_externals}
    charmcraft
    charmcraftcache
    mv
commands_pre =
    # `--without-hashes` workaround for https://github.com/canonical/charmcraft/issues/1179
    poetry export --only main,charm-libs --output requirements.txt --without-hashes
commands =
    build-production: charmcraft pack {posargs}
    build-dev: charmcraftcache pack {posargs}
commands_post =
    mv requirements.txt requirements-last-build.txt

[testenv:format]
description = Apply coding style standards to code
commands_pre =
    poetry install --only format
commands =
    poetry lock --no-update
    poetry run ruff format {[vars]all_path}
    poetry run ruff check --fix {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
commands_pre =
    poetry install --only lint
commands =
    poetry check --lock
    codespell {[vars]all_path} --skip .git --skip .tox --skip build --skip venv --skip .mypy_cache --skip {tox_root}/src/grafana_dashboards --skip {tox_root}/tests/integration/*/lib/*
    poetry run ruff check {[vars]all_path}

[testenv:unit]
description = Run unit tests
set_env = 
    {[testenv]set_env}
commands_pre =
    poetry install --only main,charm-libs,unit
commands =
    poetry run coverage run --source={[vars]src_path},{[vars]lib_path} \
    -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    poetry run coverage report
    poetry run coverage xml

[testenv:integration]
description = Run integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
allowlist_externals =
    {[testenv:build-wrapper]allowlist_externals}
commands_pre =
    {[testenv:build-wrapper]commands_pre}
    poetry install --only integration
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s --ignore={[vars]tests_path}/unit/ {posargs}
commands_post =
    {[testenv:build-wrapper]commands_post}
