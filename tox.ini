# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
env_list = lint, unit

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
all_path = {[vars]src_path} {[vars]tests_path}

[testenv]
set_env =
    PYTHONPATH = {[vars]src_path}:{tox_root}/lib
    PY_COLORS = 1
allowlist_externals =
    poetry
deps =
    poetry
    
[testenv:{build,pack-wrapper}]
# Wrap `charmcraft pack`
allowlist_externals =
    {[testenv]allowlist_externals}
    charmcraft
    mv
commands_pre =
    # TODO charm versioning: Remove
    # Workaround to add unique identifier (git hash) to charm version while specification
    # DA053 - Charm versioning
    # (https://docs.google.com/document/d/1Jv1jhWLl8ejK3iJn7Q3VbCIM9GIhp8926bgXpdtx-Sg/edit?pli=1)
    # is pending review.
    python -c 'import pathlib; import shutil; import subprocess; git_hash=subprocess.run(["git", "describe", "--always", "--dirty"], capture_output=True, check=True, encoding="utf-8").stdout; file = pathlib.Path("charm_version"); shutil.copy(file, pathlib.Path("charm_version.backup")); version = file.read_text().strip(); file.write_text(f"{version}+{git_hash}")'

    # `--without-hashes` workaround for https://github.com/canonical/charmcraft/issues/1179
    poetry export --only main,charm-libs --output requirements.txt --without-hashes
commands =
    build: charmcraft pack {posargs}
commands_post =
    mv requirements.txt requirements-last-build.txt
    mv charm_version.backup charm_version

[testenv:format]
description = Apply coding style standards to code
commands =
    poetry install
    poetry export -f requirements.txt -o requirements.txt --without-hashes

    poetry install --only fmt
    poetry run ruff --fix {[vars]all_path}
    poetry run black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
commands =
    poetry install --only lint
    poetry run codespell {tox_root} \
        --skip {tox_root}/.git \
        --skip {tox_root}/.tox \
        --skip {tox_root}/build \
        --skip {tox_root}/lib \
        --skip {tox_root}/venv \
        --skip {tox_root}/.mypy_cache \
        --skip {tox_root}/icon.svg \
        --skip {tox_root}/poetry.lock

    poetry run ruff {[vars]all_path}
    poetry run black --check --diff {[vars]all_path}

    poetry install

[testenv:unit]
description = Run unit tests
commands =
    poetry install --with unit
    poetry run coverage run --source={[vars]src_path} \
        -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    poetry run coverage report

[testenv:integration-{charm}]
description = Run integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    poetry run pytest -vv --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/{env:TEST_FILE}